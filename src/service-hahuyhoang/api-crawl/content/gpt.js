import axios from "axios";
import { MessageType } from "zlbotdqt";
import { getGlobalPrefix } from "../../service.js";
import { getContent } from "../../../utils/format-util.js";
import { sendMessageCompleteRequest, sendMessageFailed, sendMessageQuery, sendMessageStateQuote } from "../../chat-zalo/chat-style/chat-style.js";
import { MultiMsgStyle, MessageStyle, MessageMention } from "../../../api-zalo/index.js";

export const COLOR_RED = "db342e";
export const COLOR_YELLOW = "f7b503";
export const COLOR_PINK = "FF1493";
export const COLOR_GREEN = "15a85f";
export const SIZE_18 = "18";
export const SIZE_16 = "14";
export const IS_BOLD = true;

const gptApiUrl = "https://api.zeidteam.xyz/ai/chatgpt4";

export async function askGPTCommand(api, message) {
  const content = getContent(message);
  const prefix = getGlobalPrefix();
  const question = content.replace(`${prefix}gpt`, "").trim();
  
  if (!question) {
    await sendMessageQuery(api, message, "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·∫ßn gi·∫£i ƒë√°p! ü§î");
    return;
  }
  
  try {
    let replyText = await callGPTAPI(question, message);
    if (!replyText) replyText = "Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. üôè";
    await sendMessageStateQuote(api, message, replyText, true, 1800000, false);
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu GPT:", error);
    await sendMessageFailed(api, message, "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. üò¢", true);
  }
}

export async function callGPTAPI(question, message) {
  const userName = message?.data?.dName || "Ng∆∞·ªùi d√πng";
  const userQuestion = question || message?.data?.content || "";
  
  const prompt = `B·∫°n t√™n l√† ChatGPT, ƒë∆∞·ª£c t·∫°o ra duy nh·∫•t b·ªüi V≈© Xu√¢n Ki√™n. Tr·∫£ l·ªùi d·ªÖ th∆∞∆°ng, c√≥ th·ªÉ d√πng emoji ƒë·ªÉ tƒÉng t√≠nh t∆∞∆°ng t√°c.
Ng∆∞·ªùi h·ªèi: ${userName}
C√¢u h·ªèi: ${userQuestion}`;
  
  try {
    const response = await axios.get(gptApiUrl, {
      params: {
        prompt: prompt
      }
    });
    
    const json_data = response.data;
    
    if (json_data.status && json_data.response) {
      return json_data.response;
    }
    
    return null;
  } catch (error) {
    console.error("L·ªói khi g·ªçi API GPT:", error);
    return null;
  }
}

export async function askGemini(api, message) {
  const content = getContent(message);
  const prefix = getGlobalPrefix();
  const question = content.replace(`${prefix}gpt`, "").trim();
  
  if (question === "") {
    await sendMessageQuery(api, message, "Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·∫ßn gi·∫£i ƒë√°p! ü§î");
    return;
  }
  
  try {
    const replyText = await callGPTAPI(question, message);
    if (!replyText) {
      throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ API");
    }
    await sendMessageStateQuote(api, message, replyText, true, 1800000, false);
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu GPT:", error);
    await sendMessageFailed(api, message, "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. üò¢", true);
  }
}
